@{
    ViewData["Title"] = "Sales Trend Analysis";
  
}

@{
   Layout = null;


    }

<!DOCTYPE html>
<html>
<head>
    <title>Monthly Sales</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        /* Ensuring the table is responsive */
        .table {
            width: 100%;
            table-layout: fixed; /* This ensures the columns stay in a fixed size */
        }

        th, td {
            word-wrap: break-word; /* Ensures content wraps properly if it’s too long */
            text-align: center; /* Aligns content to the center of each cell */
        }

        th {
            background-color: #f8f9fa; /* Adds a light background to headers */
            text-align: center; /* Center the text horizontally */
            vertical-align: middle; /* Center the text vertically */
            padding: 10px; /* Add padding for better readability */
        }

        /* Additional styling to prevent text overflow and keep the table clean */
        td {
            max-width: 150px; /* Ensures that the text in the table cells doesn't overflow */
            overflow: hidden;
            text-overflow: ellipsis;
            padding: 10px; /* Padding for table data cells */
        }



        background-transparent {
            background: rgba(255, 255, 255, 0.1); /* Highly transparent white */
            background-image: url('/images/body3.jpg'); /* Background image */
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed; /* Optional: keeps the image fixed during scroll */
            color: #333; /* Ensure text is readable over transparency */
        }

        .background-transparent * {
            z-index: 1; /* Ensure content appears above the background */
        }
    
    </style>
</head>

<body style="margin-right:25px;background-color:whitesmoke; color: " class="background-transparent background-transparent ">
    <div class="container-fluid mt-3" style="margin-left:30px">

        <a href="@Url.Action("Index", "Home")" class="btn btn-primary mb-3" style=" margin-right: 80px">Home</a>
        <h2 class="mb-3">Sales Trend Analysis</h2>

        <div>
            <h3>  <label for="productCode">Enter Product Code:</label></h3>
            <input type="text" id="productCode" name="productCode" />
            <button onclick="fetchTrend()">Get Trend</button>
        </div>

        <div id="results" style="margin-top: 20px;">
            <h3>Regression Results</h3>
            <h2>
                <p id="formula"></p>
            </h2>
            <canvas id="trendChart" width="900" height="250"></canvas>
        </div>
    </div>

    <div class="container-fluid mt-3 col-6" style="margin-left:30px; color: ">

        <div id="forecast" style="margin-top: 40px;">
            <h3>Forecast for the Next 12 Months</h3>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>Month</th>
                        <th>Forecast </th>
                    </tr>
                </thead>
                <tbody id="forecastTable">
                    <!-- Forecast data will be appended here -->
                </tbody>
            </table>
        </div>

    </div>


</body>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<script>


    function fetchTrend() {
        const productCode = document.getElementById("productCode").value.trim();

        if (!productCode) {
            alert("Please enter a product code.");
            return;
        }

        fetch('/SalesTrend/GetTrendData', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productCode }) // Send JSON object with productCode
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Failed to fetch data: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(data); // Log data for debugging

            if (data && data.formula && data.dataPoints && data.dataPoints.length > 0) {
                document.getElementById("formula").innerText = "Trend Line: " + data.formula;

                const ctx = document.getElementById('trendChart').getContext('2d');

                // Destroy existing chart instance (if re-rendering)
                if (window.trendChartInstance) {
                    window.trendChartInstance.destroy();
                }

                // Create the chart
                window.trendChartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.dataPoints.map(dp => dp.x), // X-axis labels (time or index)
                        datasets: [
                            {
                                label: 'Actual Data',
                                data: data.dataPoints.map(dp => dp.y), // Actual data points
                                borderColor: 'blue',
                                backgroundColor: 'blue',
                                fill: false,
                                pointRadius: 5, // Increase point size for better visibility
                                pointHoverRadius: 7
                            },
                            {
                                label: 'Trend Line',
                                data: data.dataPoints.map(dp => {
                                    // Calculate trendline value (y = mx + c)
                                    const m = parseFloat(data.formula.match(/y = ([-\d.]+)x/)[1]);
                                    const c = parseFloat(data.formula.match(/x \+ ([-\d.]+)/)[1]);
                                    return m * dp.x + c;
                                }),
                                borderColor: 'red',
                                backgroundColor: 'transparent',
                                borderDash: [5, 5], // Dashed line for the trendline
                                fill: false,
                                pointRadius: 0 // No points on trendline
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            },
                            title: {
                                display: true,
                                text: 'Sales Trend Analysis'
                            }
                        },
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'Time (Index)' // Change if using actual dates
                                }
                            },
                            y: {
                                title: {
                                    display: true,
                                    text: 'Net Quantity'
                                }
                            }
                        }
                    }
                });

                   // Generate forecast for the next 12 months
                generateForecast(data.formula, data.dataPoints);


            } else {
                document.getElementById("formula").innerText = "No data found for the specified product code.";
                if (window.trendChartInstance) {
                    window.trendChartInstance.destroy(); // Clear chart if no data
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById("formula").innerText = "Error fetching data.";
        });
    }




        function generateForecast(formula, dataPoints) {
        // Parse the formula to extract m and c
        const m = parseFloat(formula.match(/y = ([-\d.]+)x/)[1]);
        const c = parseFloat(formula.match(/x \+ ([-\d.]+)/)[1]);

        const forecastTable = document.getElementById("forecastTable");
        forecastTable.innerHTML = ""; // Clear existing data

        const lastX = Math.max(...dataPoints.map(dp => dp.x)); // Find the last x value

        for (let i = 1; i <= 12; i++) {
            const forecastX = lastX + i; // Increment x value for each time step
            const forecastY = m * forecastX + c; // Calculate forecasted y value

            // Create labels as T+1, T+2, ..., T+12
            const label = `T+${i}`;

            // Append to table
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${label}</td>
                <td>${forecastY.toFixed(2)}</td>
            `;
            forecastTable.appendChild(row);
        }
    }



</script>





</html>





 